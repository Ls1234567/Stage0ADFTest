{
	"name": "Kusto control command",
	"properties": {
		"activities": [
			{
				"name": "Kusto PPE",
				"type": "AzureDataExplorerCommand",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"command": ".create-or-alter function with (folder = \"Views\", docstring = \"View to get services for API Service.\", skipvalidation = \"true\") \n    View_APIServiceGetServices(p_JobId: string, p_WorkloadName: string) {\n        /////////////////////////////////////////////////////\n        //\n        // View_APIServiceGetServices(p_JobId='2517682757198309999_a716ea70-42d8-44d6-89bb-7bf732d69a10', 'Seeding Server')\n        /////////////////////////////////////////////////////\n        //\n        let workloadJobId = View_APIServiceGetWorkloadJobId(p_JobId, p_WorkloadName);\n        let subJobsIcmLinks = View_APIServiceGetServicesIcmLinks(toscalar(workloadJobId));\n        let serviceTasks = View_APIServiceGetServiceTaskEntities(p_JobId)\n            | where WorkloadName == p_WorkloadName\n            | distinct ServiceTaskId, ServiceStartTime, ServiceFinishTime, ReturnValues;\n        let serviceTaskIds = serviceTasks\n            | project ServiceTaskId;\n        CIS_Metadata_Task\n        | where TaskId in (serviceTaskIds)\n        | join kind=rightouter WorkloadAndServiceMapping on $left.DisplayName == $right.NameInTaskMetadata\n        | where ParentName == p_WorkloadName and WorkloadOrder <= 3\n        | join kind=inner serviceTasks on $left.TaskId == $right.ServiceTaskId\n        | project ServiceName = EntityName, ServiceOrder = Order, ServiceStatus = iff(isnotempty(CustomState), CustomState, StateName), ServiceStartTime, ServiceFinishTime,\n            ServiceTimeElapsed = iff(StateName == \"Finished\", datetime_diff('minute', FinishDate, StartDate), \n                iff(StateName == \"NotStarted\", 0, \n                datetime_diff('minute', now(), StartDate))),\n            ServiceTaskId = TaskId, ReturnValues\n        | join kind=leftouter subJobsIcmLinks on ServiceTaskId\n        | order by ServiceOrder asc\n        | project ServiceName, ServiceStartTime, ServiceFinishTime, ServiceTimeElapsed, ServiceOrder, ServiceStatus, IcmLinks, ReturnValues\n    }",
					"commandTimeout": "00:20:00"
				},
				"linkedServiceName": {
					"referenceName": "M365OpsCenterppe",
					"type": "LinkedServiceReference"
				}
			}
		],
		"annotations": []
	}
}